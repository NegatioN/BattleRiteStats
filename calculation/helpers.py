#!/usr/bin/env python3
# -*- coding: utf-8
import requests
import json
import pickle
import ntpath
import re
from bs4 import BeautifulSoup
from collections import defaultdict
import numpy as np
from ratelimiter import RateLimiter
import pandas as pd

def get_content(url, headers):
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        return response.json()['data']
    else:
        return []

def default_to_regular(d):
    if isinstance(d, defaultdict):
        d = {k: default_to_regular(v) for k, v in d.items()}
    return d

def pickle_info(build_info, filename):
    with open('assets/{}'.format(filename), 'wb+') as f:
        f.write(pickle.dumps(default_to_regular(build_info)))

def load_pickle(filename):
    with open('assets/{}'.format(filename), 'rb') as f:
        return pickle.loads(f.read())

def path_leaf(path):
    head, tail = ntpath.split(path)
    return tail or ntpath.basename(head)

'''Kinda manual method for getting color-scheme of character skills for now. Just run for all heros'''
def bootstrap_character_colors(hero_name):
    cont = requests.get('https://battlerite.gamepedia.com/{}/Battlerites'.format(hero_name.replace(' ', '_'))).text
    bs = BeautifulSoup(cont, "html.parser")
    stuff = bs.find_all('div', {'class': 'battlerite'})
    char_colors = []
    for s in stuff:
        title = s.find('div', {'class': 'battlerite--title'}).p.text
        color_alt = s.find('div', {'class': 'battlerite--art'}).img['alt']
        color = re.split('\s', color_alt)[-1].split('.')[0].lower()
        char_colors.append({'title': title, 'color': color})
    return char_colors

def colors_to_id_mapping(flattened_battlerites, cols, brite_name_method):
        name_lookup = {brite_name_method(x).lower(): x for x in list(flattened_battlerites.keys())}
        for c in cols:
                n = c['title'].lower()
                if n in name_lookup:
                        c['id'] = name_lookup[n]
        rev_col_lookup = {v['color']: k for k, v in battlerite_type_mapping.items()}
        out = {str(x['id']): rev_col_lookup[x['color']] for x in cols}
        return json.dumps(out)

battlerite_type_mapping = {1: {'color': 'red', 'type': 'offense'},
                           2: {'color': 'yellow', 'type': 'mobility'},
                           3: {'color': 'blue', 'type': 'utility'},
                           4: {'color': 'green', 'type': 'survival'},
                           5: {'color': 'pink', 'type': 'control'},
                           6: {'color': 'teal', 'type': 'support'},
                           7: {'color': 'grey', 'type': 'mixed'}}

def get_battlerite_color_mapping():
    with open('battlerites_type_mappings.json', 'r') as f:
        defined_mappings = json.load(f)
        color_mappings = defaultdict(lambda: battlerite_type_mapping[7]['color'])
        for k, v in defined_mappings.items():
            color_mappings[k] = battlerite_type_mapping[v]['color']
        return color_mappings


def get_battlerite_type_mapping():
    with open('battlerites_type_mappings.json', 'r') as f:
        defined_mappings = json.load(f)
        type_mappings = defaultdict(lambda: battlerite_type_mapping[7]['type'])
        for k, v in defined_mappings.items():
            type_mappings[k] = battlerite_type_mapping[v]['type']
        return type_mappings


def update_databases(master_team_dict):
    p_t = defaultdict(lambda: [])
    team_info = defaultdict(lambda: [])
    blaclisted_keys = ['users']
    for teamid,v in master_team_dict.items():
            teamid = int(teamid)
            for p in v['users']:
                    p_t['userid'].append(int(p))
                    p_t['teamid'].append(teamid)

            team_info['teamid'].append(teamid)
            for vs in v:
                    if vs not in blaclisted_keys:
                            team_info[vs].append(int(v[vs]))
    p_t_df = pd.DataFrame.from_dict(p_t)[['userid', 'teamid']]
    del p_t
    team_info_df = pd.DataFrame.from_dict(team_info)
    team_info_df['timee'] = team_info_df['time']
    team_info_df = team_info_df[['teamid', 'league', 'division', 'divrating', 'timee', 'wins', 'losses']]
    del team_info
    team_info_df.to_csv('db/tmp/t.csv', index=False)
    p_t_df.to_csv('db/tmp/pt.csv', index=False)


def get_proxies():
    try:
        rate_limiter = RateLimiter(max_calls=30, period=60)
        proxy = {'supportsHttps': False, 'speed': 0, 'protocol': 'yolo', 'post': False}
        while not (proxy['speed'] > 30
                   and proxy['supportsHttps']
                   and proxy['post']
                   and proxy['protocol'] == 'http'):
            with rate_limiter:
                proxy = requests.get('https://gimmeproxy.com/api/getProxy').json()
        proxies = {'http': 'http://{}'.format(proxy['ipPort']), 'https': 'https://{}'.format(proxy['ipPort'])}
    except:
        proxies = None
    return proxies

def get_user_ids2(prox=True):
    if prox:
        proxies = get_proxies()
    else:
        proxies = None
    print('Using proxy: {}'.format(proxies))
    query_url = 'https://battlerite-stats.com/leaderboards'
    ids = []
    offset = 0
    session = requests.Session()
    resp = session.get(query_url, proxies=proxies)
    session_cookies = session.cookies.get_dict()
    bs = BeautifulSoup(resp.content, "html.parser")
    csrf_token = bs.find('meta', {'name': 'csrf-token'})['content']
    cookies = 'theme={theme}; lang={lang}; XSRF-TOKEN={XSRF-TOKEN}; laravel_session={laravel_session}'.format(**session_cookies)
    headers = {'X-CSRF-TOKEN': csrf_token,
               'Cookie': cookies}

    only_grand_champions = True
    rate_limiter = RateLimiter(max_calls=10, period=60)
    while only_grand_champions:
        with rate_limiter:
            response = requests.post(query_url, headers=headers, data={'id': offset}, proxies=proxies)
            bs = BeautifulSoup(response.json()['blocks'], "html.parser")
            cur_ids = [x['href'].replace('https://battlerite-stats.com/profile/', '')
                       for x in bs.find_all('a', {'class': 'table-row-link'})]
            divisions = bs.find_all('div', {'class': 'league-name'})

            only_grand_champions = np.all([True if x.text in ['Grand Champion', 'Champion League'] else False
                                           for x in divisions])
            offset += 50
            ids.extend(cur_ids)
            if offset >= 500:
                # Battlerite-stats seems to only display this many on their leaderboard.
                break

    return ids


def get_user_ids():
    return ['776450744541908992',
            '779528393816432640',
            '3275',
            '132',
            '784917280495644672',
            '776122211131068416',
            '929807552647180288',
            '7854',
            '835837657555812352',
            '538',
            '936282883222585344',
            '779027157677649920',
            '804919733530013696',
            '5363',
            '792084405979066368',
            '133',
            '778261434919424000',
            '784425745316458496',
            '778794780141445120',
            '1041',
            '5192',
            '2106',
            '777039017609924608',
            '931190392903344128',
            '803650591871082496',
            '793328495462854656',
            '825738634681528320',
            '779862011638087680',
            '797180455249125376',
            '914658874693394432',
            '542',
            '821991447724175360',
            '4761',
            '783149438397984768',
            '776666749549547520',
            '804386655451623424',
            '882293334650007552',
            '780436514848014336',
            '6354',
            '779722915678658560',
            '188',
            '776787878587011072',
            '778751656371314688',
            '6081',
            '847195419984412672',
            '944673210899800064',
            '776849003374579712',
            '414',
            '779479758588243968',
            '783754227204911104',
            '10155',
            '805209171350929408',
            '781544549016297472',
            '1584',
            '1436',
            '3324',
            '792004370328854528',
            '872272421724504064',
            '783743260521820160',
            '11482',
            '796754935004934144',
            '5983',
            '48',
            '778780585920462848',
            '117',
            '2613',
            '465',
            '779703903427121152',
            '780052291205083136',
            '978670017107341312',
            '783081791153131520',
            '665',
            '853751680066531328',
            '779340643532152832',
            '1839',
            '788150683391123456',
            '6094',
            '782659751094935552',
            '91',
            '711',
            '781077171853754368',
            '852997384811196416',
            '820666204124491776',
            '943623070969683968',
            '7194',
            '778281206914617344',
            '785947035781173248',
            '146',
            '891812543394365440',
            '777312441322311680',
            '802396482442502144',
            '776110860010655744',
            '786629089531400192',
            '949253223993196544',
            '646',
            '792558792721178624',
            '776040988803207168',
            '776448472613261312',
            '781796918991945728',
            '778561615216930816',
            '515',
            '776855220125831168',
            '809816664530108416',
            '779701829582852096',
            '789501047944130560',
            '7444',
            '2012',
            '807585597257564160',
            '885687998178537472',
            '2243',
            '50',
            '786547811759034368',
            '788211045775855616',
            '877585916443635712',
            '849650558032814080',
            '780373944967499776',
            '795301719335645184',
            '927923317564911616',
            '793190907905187840',
            '778439243566551040',
            '3891',
            '804543696979767296',
            '796947137798737920',
            '939192975546834944',
            '930887828412469248',
            '885585271582769152',
            '777364499022876672',
            '778320231192989696',
            '1840',
            '780042330064433152',
            '788035822644514816',
            '786401041926197248',
            '818840206219292672',
            '949947668359200768',
            '804599321508065280',
            '776605988034842624',
            '965949713985716224',
            '963057438528032768',
            '931251182293397504',
            '778595379959717888',
            '779634442120601600',
            '845351952702382080',
            '974333619889905664',
            '5327',
            '824374090671468544',
            '790533584787214336',
            '1463',
            '11365',
            '778288456907493376',
            '776864765732589568',
            '790699948625764352',
            '785414734827622400',
            '781074452443181056',
            '782673413851451392',
            '776804581173760000',
            '779971941044985856',
            '779766903496396800',
            '802239428079792128',
            '778291158160904192',
            '778728221335252992',
            '776914277524180992',
            '779007319601213440',
            '778276383183998976',
            '777245030405509120',
            '322',
            '776252474255347712',
            '779915056669413376',
            '804722183149600768',
            '779319371700002816',
            '780827251238395904',
            '776801727981686784',
            '804385491997835264',
            '931624141201747968',
            '851855157665869824',
            '6745',
            '785771196489797632',
            '778518432797831168',
            '977420533312442368',
            '776479107604156416',
            '780045164780589056',
            '804887448499929088',
            '776908485337157632',
            '778293979656622080',
            '778942817534873600',
            '787089327036465152',
            '812468342400102400',
            '930297717056507904',
            '10489',
            '777165693241135104',
            '782127964514029568',
            '786228892972224512',
            '940725190940352512',
            '776043473915744256',
            '4999',
            '5976',
            '6389',
            '792664844175290368',
            '804445507811426304',
            '851837976026689536',
            '846040805817860096',
            '10884',
            '779411075287363584',
            '786604389124149248',
            '1451',
            '981543686259261440',
            '781927821676261376',
            '952939903958814720',
            '1379',
            '777005787800276992',
            '978848844441890816',
            '888010920075345920',
            '776832892184694784',
            '862720635812585472',
            '866706467040931840',
            '781835961448419328',
            '830230787986169856',
            '785882255066279936',
            '784355394272243712',
            '825141259835416576',
            '793512049027198976',
            '830540739682385920',
            '942306256713060352',
            '3020',
            '776812647143313408',
            '780824817531256832',
            '779686708026421248',
            '782514287125098496',
            '850357985141207040',
            '783790711928676352',
            '6832',
            '798836082417475584',
            '65',
            '780805910258929664',
            '788744400137228288',
            '4958',
            '88',
            '778582396277760000',
            '785263633897771008',
            '939734915912761344',
            '8040',
            '3511',
            '780110107693424640',
            '804842809667493888',
            '780042332425838592',
            '908421157693304832',
            '1832',
            '779334581856899072',
            '936292416858787840',
            '2053',
            '818117969111556096',
            '799',
            '917233253176455168',
            '784412161324748800',
            '778274395608190976',
            '781279545817976832',
            '778786607393288192',
            '782800702534717440',
            '787603152215093248',
            '852908528346734592',
            '942822851180941312',
            '873960120374145024',
            '783335665411715072',
            '778279370182758400',
            '782569222973829120',
            '779515782181818368',
            '285',
            '804485078406283264',
            '4597',
            '11179',
            '796186381008375808',
            '931937043070750720',
            '11000',
            '776434810372624384',
            '959489584272654336',
            '4736',
            '804685497220866048',
            '1660',
            '853052922815197184',
            '938399145671184384',
            '998',
            '797528520585777152',
            '877958579020251136',
            '780298726169280512',
            '960374737509457920',
            '873606484636872704',
            '778918903748374528',
            '781338539316105216',
            '969141490653794304',
            '790662585442766848',
            '780369824315478016',
            '981415514477879296',
            '989471161505193984',
            '913302403896455168',
            '964802643308511232',
            '951710842192277504',
            '790707692879622144',
            '787602337945489408',
            '779004480535560192',
            '780173105514553344',
            '805310500215861248',
            '778598764540747776',
            '815720623165808640',
            '805135605796323328',
            '104',
            '784113153960194048',
            '883228907682283520',
            '838830240758370304',
            '919304557253767168',
            '779753800637485056',
            '782078573791043584',
            '776720405573537792',
            '793015958284410880',
            '793621223081906176',
            '47',
            '789902821855203328',
            '928317910504579072',
            '781453323944484864',
            '801934157314920448',
            '974456775887749120',
            '779751774293729280',
            '941103217360683008',
            '903336939833401344',
            '959615169263243264',
            '5781',
            '946040710686216192',
            '949185882223685632',
            '780739534739611648',
            '776072800799690752',
            '779749793604968448',
            '938352131465998336',
            '794619906837585920',
            '780174805352738816',
            '782779844063801344',
            '834420574343282688',
            '969088203346874368',
            '784171435022225408',
            '777092439335899136',
            '779427633367777280',
            '786674724766908416',
            '982654707245916160',
            '794872460255301632',
            '779046396497104896',
            '853101262386900992',
            '779006717550800896',
            '928360709312618496',
            '783824947016523776',
            '4248',
            '778324319188164608',
            '954644916791820288',
            '825367841518792704',
            '782180586583392256',
            '938011330890338304',
            '932274089660440576',
            '781078330639265792',
            '853233662857199616',
            '782618827224674304',
            '776483731325194240',
            '828302208616509440',
            '873279303184429056',
            '783648430160482304',
            '786574769020604416',
            '788821434410610688',
            '873319167078580224',
            '221',
            '805174620901752832',
            '818163285663821824',
            '780800620423688192',
            '777176036176695296',
            '776099368481722368',
            '783346201973108736',
            '9159',
            '776407190364884992',
            '787331582666084352',
            '782909329710931968',
            '798129515619557376',
            '933025845482762240',
            '937799194033397760',
            '783522579192352768',
            '779797801738571776',
            '4079',
            '900307543312711680',
            '363',
            '782644021511225344',
            '780003689090940928',
            '780047866629595136',
            '946422016486031360',
            '777091147582541824',
            '776912481649037312',
            '796210373396148224',
            '369',
            '985637886672154624',
            '777073977523834880',
            '784520461794021376',
            '939847868548825088',
            '776054072301195264',
            '797940367935811584',
            '866990168584884224',
            '175',
            '846466002513440768',
            '873244978611105792',
            '780762497153138688',
            '781735521033523200',
            '873306225830404096',
            '977263897897738240',
            '778306229628964864',
            '835839809762242560',
            '921230853747654656',
            '983048254289793024',
            '790301441519656960',
            '165',
            '789702808323633152',
            '840934481069215744',
            '780547485486710784',
            '777236699574046720',
            '906803795256815616',
            '965118710258012160',
            '852215987213316096',
            '7260',
            '913464237471440896',
            '779117673312313344',
            '492',
            '103',
            '851890418537865216',
            '776861965703319552',
            '805069508187406336',
            '792854753972461568',
            '904304724470280192',
            '776599178288697344',
            '928584420103954432',
            '776891852782702592',
            '74',
            '776499424640765952',
            '855901672134811648',
            '784305980434419712',
            '987278283412484096',
            '779546474609520640',
            '790643013868199936',
            '778303860186943488',
            '789245898793295872',
            '804388715861520384',
            '984118639655583744',
            '1906',
            '784010036430143488',
            '8928',
            '873947383879311360',
            '933720602500591616',
            '782427477241917440',
            '778261764046458880',
            '812608811734024192',
            '139',
            '2045',
            '874207642740998144',
            '849505876011266048',
            '940967813915484160',
            '2494',
            '804693165255831552',
            '778263414421196800',
            '939630081448513536',
            '778316956725026816',
            '931544086647808000',
            '1310',
            '904008919272263680',
            '782018945120096256',
            '789609708142071808',
            '937386055282372608',
            '878879087647662080',
            '909427498553589760',
            '840707737460555776',
            '776042941843116032',
            '792701605953806336',
            '974574057158787072',
            '822195122769899520',
            '873879916523962368',
            '946667588652539904',
            '4365',
            '935113975425863680',
            '776597261621792768',
            '797278009664090112',
            '786984970710310912',
            '929380592989114368',
            '914664654226206720',
            '782958514875297792',
            '778331781517680640',
            '826992163576487936',
            '948022013786783744',
            '776778433064734720',
            '5258',
            '726',
            '781914479771406336',
            '778980637871857664',
            '1877',
            '860524084918886400',
            '826510814746914816',
            '781081674615250944',
            '780756864106389504',
            '982971089833594880',
            '873328237038678016',
            '777250443020603392',
            '6468',
            '779413264265277440']
